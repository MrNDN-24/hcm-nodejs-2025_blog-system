/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/v1/auth/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AuthController_register_v1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AuthController_Login_v1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/reset/forgot-password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["PasswordResetController_forgotPassword_v1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/reset/reset-password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["PasswordResetController_resetPassword_v1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        ResponseData: {
            data: Record<string, never>;
            statusCode: number;
            message: string;
            error: Record<string, never>;
        };
        UserSerializer: Record<string, never>;
        RegisterDto: {
            /**
             * @description Tên đăng nhập của người dùng (không được trùng)
             * @example tohoai123
             */
            username: string;
            /**
             * @description Họ và tên đầy đủ của người dùng.
             * @example Tô Hoài
             */
            fullName: string;
            /** @example tohoai@gmail.com */
            email: string;
            /**
             * @description Mật khẩu có ít nhất 6 ký tự.
             * @example tohoai321
             */
            password: string;
            /**
             * @description Vai trò của người dùng (ví dụ: ADMIN, AUTHOR, USER).
             * @example user
             * @enum {string}
             */
            role: "admin" | "author" | "user";
            /**
             * @description Bút danh (chỉ dành cho tác giả, có thể bỏ trống).
             * @example Pen Master
             */
            penName?: string;
            /**
             * @description Tiểu sử ngắn của người dùng (có thể bỏ trống).
             * @example Tôi là một tác giả chuyên viết tiểu thuyết.
             */
            bio?: string;
        };
        TokenResponse: {
            access_token: string;
        };
        LoginDto: {
            username: string;
            password: string;
        };
        ForgotPasswordDto: Record<string, never>;
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    AuthController_register_v1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RegisterDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseData"] & {
                        data?: components["schemas"]["UserSerializer"];
                    };
                };
            };
        };
    };
    AuthController_Login_v1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LoginDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseData"] & {
                        data?: components["schemas"]["TokenResponse"];
                    };
                };
            };
        };
    };
    PasswordResetController_forgotPassword_v1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ForgotPasswordDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PasswordResetController_resetPassword_v1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
